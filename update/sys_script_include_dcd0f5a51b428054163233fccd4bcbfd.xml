<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_terrd_snow_cicd.CiCdAtfLibrary</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CiCdAtfLibrary</name>
        <script><![CDATA[var CiCdAtfLibrary = Class.create();
CiCdAtfLibrary.prototype = /** @lends global.module:sys_script_include.CiCdAtfLibrary.prototype */ {

    initialize: function(request, response) {
        var self = this;
    },

    getTestActivityStatus: function(i) {
        var state_array = [];

        var self = this;
        var gr = new GlideRecord('sys_execution_tracker');
        gr.addEncodedQuery('sys_created_on>=' + workflow.scratchpad.atfScheduleStartedAt + '^sourceIN' + workflow.scratchpad.atfScheduleList);
        gr.query();

        if (gr.getRowCount() == 0) {
            workflow.error("No execution tracker found");
            current.work_notes = "Error: No execution tracker found. This means no active Suite Schedules found. Please creaate one and try again.";
            return "Failed";
        }


        while (gr.next()) {

            state_array.push(gr.getDisplayValue('state'));
        }

        current.work_notes = "Activity state: " + state_array.join();

        var arrayUtil = new global.ArrayUtil();
        if (arrayUtil.contains(state_array, "Pending") || arrayUtil.contains(state_array, "Running"))
            return "Running";
        else if (arrayUtil.contains(state_array, "Failed") || arrayUtil.contains(state_array, "Cancelled"))
            return "Failed";
        else
            return "Successful"; //returning successful in the last becuase all has to be successful. even one failed or running should not return successful
    },

    startAllSuites: function() {
        var self = this;
        var execution_d = [];

        var gr = new GlideRecord('sys_atf_test_suite');
        gr.addEncodedQuery('active=true');
        //gr.setLimit(100);
        gr.query();

        gs.info('total ' + gr.getRowCount());

        while (gr.next()) {

            var RequestClass = Class.create();
            RequestClass.prototype = {

                initialize: function(obj) {
                    this.obj = obj;
                },

                getParameter: function(name) {
                    return this.obj[name];
                },
                type: 'RequestClass'
            };
            var request = new RequestClass({
                'sysparm_name': 'true',
                'sysparm_ajax_processor_ut_test_suite_id': gr.sys_id,
                'sysparm_ajax_processor_test_runner_session_id': self.getTestRunnerSessionId()
            });

            execution_d.push(new global.TestExecutorAjax(request).process());
        }

        return execution_d;

    },

    getTestRunnerSessionId: function() {
        var testRunnerSessionId = null;
        var existingRunner = new GlideRecord("sys_atf_agent");
        existingRunner.addQuery("status", "online");
        existingRunner.addQuery("type", "manual");
        existingRunner.orderByDesc('last_checkin');
        existingRunner.setLimit(1);
        existingRunner._query();
        if (existingRunner._next()) {
            testRunnerSessionId = existingRunner.getValue('session_id');
        }
        return testRunnerSessionId;
    },

    executeSuite: function() {
        var self = this,
            suiteId,
            out = {
                executionId: null
            },
            need_browser = false,
            testRunnerSessionId = null;

        var gr = new GlideRecord('sys_atf_test_suite');
        if (!gr.get(suiteId)) {
            return new sn_ws_err.BadRequestError("Could not find the Test suite with id: " + suiteId);
        }
        out.url = gs.getProperty('glide.servlet.uri').concat(gr.getLink(true));
        out.name = gr.getDisplayValue();
        need_browser = sn_atf.AutomatedTestingFramework.doesSuiteHaveUITests(suiteId);
        if (need_browser) {
            testRunnerSessionId = self.getTestRunnerSessionId();
            if (gs.nil(testRunnerSessionId)) {
                return new sn_ws_err.BadRequestError("This TestSuite requires an active Test Runner to be available.");
            }
        }
        // execute suite
        out.executionId = new TestExecutorAjax((function() {
            var params = {
                'sysparm_name': 'true',
                'sysparm_ajax_processor_ut_test_suite_id': suiteId,
                'sysparm_ajax_processor_test_runner_session_id': testRunnerSessionId
            };

        })(), new GlideXMLDocument(), '').process();
        /*
        var executor = new sn_atf.UserTestSuiteExecutor();
        executor.setTestSuiteSysId(suiteId);
        executor.setTestRunnerSessionId(testRunnerSessionId);
        out.executionId = executor.start();
        */
        return out;
    },
    /**
     * Tet Test-Suite results<br>
     * 
     * mapped to GET /api/devops/v1/cicd/atf/suite/{id}
     * @returns {any} out
     */
    getSuiteResults: function() {
        var self = this,
            out = {
                testResults: []
            };
        var suiteId = self.getPathParam('suiteId');
        var gr = new GlideRecord('sys_atf_test_suite_result');
        if (gr.get(suiteId)) {
            out.number = gr.getValue('number');
            out.status = gr.getValue('status');
            out.duration = gr.getValue('run_time');
            out.url = gs.getProperty('glide.servlet.uri').concat(gr.getLink(true));
            out.type = 'test_suite_result';
            var gRes = new GlideRecord('sys_atf_test_result');
            gRes.addQuery('parent', gr.getValue('sys_id'));
            gRes._query();
            while (gRes._next()) {
                out.testResults.push(self._getTestResultDetails(gRes.getValue('sys_id')));
            }
        }
        return out;
    },

    /**
     * Get Single Test Results<br>
     * mapped to GET /api/devops/v1/cicd/atf/test/{id}
     * @returns {any}
     */
    getTestResults: function() {
        var self = this;
        var testId = self.getPathParam('testId');
        return self._getTestResultDetails(testId);
    },
    /**
     * Get the execution state of a test run<br>
     * mapped to GET /api/devops/v1/cicd/atf/track/{id}
     * @returns {any}
     */
    getExecutionTrackerState: function(id) {
        var self = this;
        var gr = new GlideRecord('sys_execution_tracker');
        gr.get(id);
        return {
            state: {
                value: gr.getValue('state'),
                display_value: gr.getDisplayValue('state')
            },
            result: {
                value: gr.getValue('result'),
                display_value: gr.getDisplayValue('result')
            },
            url: gs.getProperty('glide.servlet.uri').concat(gr.getLink(true))
        };
    },
    /**
     * convert test result to object
     * 
     * @param {any} sysId
     * @returns {any} out
     */
    _getTestResultDetails: function(sysId) {
        var self = this,
            out = {
                stepResults: []
            };
        var gr = new GlideRecord('sys_atf_test_result');
        if (gr.get(sysId)) {
            out.number = gr.getDisplayValue('test');
            out.status = gr.getValue('status');
            out.startTime = gr.getValue('start_time');
            out.endTime = gr.getValue('end_time');
            out.duration = gr.getValue('run_time');
            out.output = gr.getValue('output');
            out.type = 'test_result';
            out.url = gs.getProperty('glide.servlet.uri').concat(gr.getLink(true));
            var gRes = new GlideRecord('sys_atf_test_result_step');
            gRes.addQuery('test_result', gr.getValue('sys_id'));
            gRes.orderBy('step.order');
            gRes._query();
            while (gRes._next()) {
                out.stepResults.push({
                    order: parseInt(gRes.getElement('step.order').toString(), 10),
                    startTime: gRes.getValue('start_time'),
                    step: gRes.getDisplayValue('step'),
                    status: gRes.getValue('status'),
                    summary: gRes.getValue('summary'),
                    url: gs.getProperty('glide.servlet.uri').concat(gRes.getLink(true))
                });
            }
        }
        return out;
    },
    type: 'CiCdAtfLibrary'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>Mahesh.Mani</sys_created_by>
        <sys_created_on>2019-12-30 21:09:24</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>dcd0f5a51b428054163233fccd4bcbfd</sys_id>
        <sys_mod_count>20</sys_mod_count>
        <sys_name>CiCdAtfLibrary</sys_name>
        <sys_package display_value="SNOW CICD" source="x_terrd_snow_cicd">189529481b0ec0d0e8e30dc8cd4bcb4b</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="SNOW CICD">189529481b0ec0d0e8e30dc8cd4bcb4b</sys_scope>
        <sys_update_name>sys_script_include_dcd0f5a51b428054163233fccd4bcbfd</sys_update_name>
        <sys_updated_by>Mahesh.Mani</sys_updated_by>
        <sys_updated_on>2020-01-22 01:13:07</sys_updated_on>
    </sys_script_include>
</record_update>
